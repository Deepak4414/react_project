{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_project\\\\frontend\\\\src\\\\components\\\\StudentModule\\\\View\\\\MainComponent\\\\ExploreMaterial\\\\Function\\\\Rating.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../../../../Css/RatingTooltip.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rating = ({\n  item,\n  username\n}) => {\n  _s();\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n  const [ratingDistribution, setRatingDistribution] = useState([0, 0, 0, 0, 0]); // Default counts\n  const [totalRatings, setTotalRatings] = useState(0);\n  const [averageRating, setAverageRating] = useState(0);\n\n  // Fetch rating distribution and calculate overall rating\n  useEffect(() => {\n    const fetchRatingDistribution = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/rating/${item}`, {\n          params: {\n            username\n          }\n        });\n        const distribution = response.data;\n        setRatingDistribution(distribution);\n\n        // Calculate total ratings and average rating\n        const total = distribution.reduce((acc, count) => acc + count, 0);\n        const average = distribution.reduce((acc, count, index) => acc + count * (index + 1), 0) / (total || 1);\n        setTotalRatings(total);\n        setAverageRating(average.toFixed(1)); // Round to 1 decimal place\n      } catch (error) {\n        console.error(\"Error fetching rating distribution:\", error);\n      }\n    };\n    fetchRatingDistribution();\n  }, [item, username]);\n  const handleRatingSubmit = async (e, itemId) => {\n    e.preventDefault();\n    const ratingValue = e.target.ratingValue.value;\n    try {\n      const response = await axios.post('http://localhost:5000/api/rating', {\n        itemId,\n        username,\n        rating: ratingValue\n      });\n      if (response.status === 200) {\n        setFeedbackMessage(`Thank you for rating item ${itemId} as ${ratingValue} stars!`);\n      } else {\n        setFeedbackMessage(\"Failed to submit rating. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error submitting rating:\", error);\n      if (error.response && error.response.status === 400) {\n        setFeedbackMessage('You have already rated this item');\n      } else {\n        setFeedbackMessage('An error occurred. Please try again.');\n      }\n    }\n    e.target.reset(); // Reset the form after submission\n  };\n  const renderBarGraph = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rating-bar-graph\",\n      children: ratingDistribution.map((count, index) => {\n        const percentage = (count / (totalRatings || 1) * 100).toFixed(1);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rating-bar-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rating-bar-label\",\n            children: [5 - index, \" star\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rating-bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rating-bar-fill\",\n              style: {\n                width: `${percentage}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rating-bar-percentage\",\n            children: [percentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rating-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleRatingSubmit(e, item),\n      className: \"rating-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: `ratingValue-${item}`,\n        children: \"Rate this item:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: `ratingValue-${item}`,\n        name: \"ratingValue\",\n        min: \"1\",\n        max: \"5\",\n        required: true,\n        className: \"rating-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"rating-submit-btn\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), feedbackMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"rating-feedback\",\n      children: feedbackMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(Rating, \"9baFE8wXlD9I1hX1mYFg5U9GOkk=\");\n_c = Rating;\nexport default Rating;\nvar _c;\n$RefreshReg$(_c, \"Rating\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Rating","item","username","_s","showTooltip","setShowTooltip","feedbackMessage","setFeedbackMessage","ratingDistribution","setRatingDistribution","totalRatings","setTotalRatings","averageRating","setAverageRating","fetchRatingDistribution","response","get","params","distribution","data","total","reduce","acc","count","average","index","toFixed","error","console","handleRatingSubmit","e","itemId","preventDefault","ratingValue","target","value","post","rating","status","reset","renderBarGraph","className","children","map","percentage","fileName","_jsxFileName","lineNumber","columnNumber","style","width","onSubmit","htmlFor","type","id","name","min","max","required","_c","$RefreshReg$"],"sources":["D:/react_project/frontend/src/components/StudentModule/View/MainComponent/ExploreMaterial/Function/Rating.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../../../../Css/RatingTooltip.css';\r\n\r\nconst Rating = ({ item, username }) => {\r\n    const [showTooltip, setShowTooltip] = useState(false);\r\n    const [feedbackMessage, setFeedbackMessage] = useState(\"\");\r\n    const [ratingDistribution, setRatingDistribution] = useState([0, 0, 0, 0, 0]); // Default counts\r\n    const [totalRatings, setTotalRatings] = useState(0);\r\n    const [averageRating, setAverageRating] = useState(0);\r\n\r\n    // Fetch rating distribution and calculate overall rating\r\n    useEffect(() => {\r\n        const fetchRatingDistribution = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:5000/api/rating/${item}`, {\r\n                    params: { username }\r\n                });\r\n                const distribution = response.data;\r\n                setRatingDistribution(distribution);\r\n\r\n                // Calculate total ratings and average rating\r\n                const total = distribution.reduce((acc, count) => acc + count, 0);\r\n                const average = distribution.reduce(\r\n                    (acc, count, index) => acc + count * (index + 1),\r\n                    0\r\n                ) / (total || 1);\r\n\r\n                setTotalRatings(total);\r\n                setAverageRating(average.toFixed(1)); // Round to 1 decimal place\r\n            } catch (error) {\r\n                console.error(\"Error fetching rating distribution:\", error);\r\n            }\r\n        };\r\n\r\n        fetchRatingDistribution();\r\n    }, [item, username]);\r\n\r\n    const handleRatingSubmit = async (e, itemId) => {\r\n        e.preventDefault();\r\n        const ratingValue = e.target.ratingValue.value;\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/rating', {\r\n                itemId,\r\n                username,\r\n                rating: ratingValue,\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                setFeedbackMessage(`Thank you for rating item ${itemId} as ${ratingValue} stars!`);\r\n            } else {\r\n                setFeedbackMessage(\"Failed to submit rating. Please try again.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error submitting rating:\", error);\r\n            if (error.response && error.response.status === 400) {\r\n                setFeedbackMessage('You have already rated this item');\r\n            } else {\r\n                setFeedbackMessage('An error occurred. Please try again.');\r\n            }\r\n        }\r\n\r\n        e.target.reset(); // Reset the form after submission\r\n    };\r\n\r\n    const renderBarGraph = () => {\r\n        return (\r\n            <div className=\"rating-bar-graph\">\r\n                {ratingDistribution.map((count, index) => {\r\n                    const percentage = ((count / (totalRatings || 1)) * 100).toFixed(1);\r\n                    return (\r\n                        <div key={index} className=\"rating-bar-item\">\r\n                            <div className=\"rating-bar-label\">\r\n                                {5 - index} star\r\n                            </div>\r\n                            <div className=\"rating-bar\">\r\n                                <div\r\n                                    className=\"rating-bar-fill\"\r\n                                    style={{ width: `${percentage}%` }}\r\n                                ></div>\r\n                            </div>\r\n                            <div className=\"rating-bar-percentage\">{percentage}%</div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"rating-component\">\r\n            {/* <h3 className=\"rating-overall\">\r\n                {averageRating} out of 5 ({totalRatings} ratings)\r\n            </h3> */}\r\n            {/* {renderBarGraph()} */}\r\n            <form\r\n                onSubmit={(e) => handleRatingSubmit(e, item)}\r\n                className=\"rating-form\"\r\n            >\r\n                <label htmlFor={`ratingValue-${item}`}>\r\n                    Rate this item:\r\n                </label>\r\n                <input\r\n                    type=\"number\"\r\n                    id={`ratingValue-${item}`}\r\n                    name=\"ratingValue\"\r\n                    min=\"1\"\r\n                    max=\"5\"\r\n                    required\r\n                    className=\"rating-input\"\r\n                />\r\n                <button type=\"submit\" className=\"rating-submit-btn\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n            {feedbackMessage && <p className=\"rating-feedback\">{feedbackMessage}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rating;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}